{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "clusterName": {
            "type": "String",
            "defaultValue": "dittopgsql"
        },
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "https://raw.githubusercontent.com/youcef-f/azure_postgres_patroni/master", 
            "metadata": {
                "description": "Change this value to your repo name if deploying from a fork"
            }
        },
        "vnetGroup": {
            "type": "String",
            "defaultValue": "ptr-uat-rg",
            "metadata": {
                "description": "VNET Resource Group."
            }
        },
        "newVnet": {
            "type": "string",
            "defaultValue": "yes",
            "allowedValues": [
                "yes",
                "no"
            ],
            "metadata": {
                "description": "Would you like to create a new vnet?"
            }
        },
        "lbType": {
            "type": "string",
            "defaultValue": "internal",
            "allowedValues": [
                "internal",
                "external"
            ],
            "metadata": {
                "description": "Would you like to create an internal or external load balancer?"
            }
        },
        "vnetName": {
            "defaultValue": "ptr-uat-vnet",
            "type": "String",
            "metadata": {
                "description": "Name of the vnet you would like to create, or that you would like to deploy this into."
            }
        },
        "zookeeperNetName": {
            "defaultValue": "dcos-agentPublicSubnet",
            "type": "String",
            "metadata": {
                "description": "Name you would like to give to zookeeper's subnet."
            }
        },
        "postgresNetName": {
            "defaultValue": "postgres-agentPublicSubnet",
            "type": "String",
            "metadata": {
                "description": "Name you would like to give to postgres' subnet."
            }
        },
        "zookeeperVMSize": {
            "type": "string",
            "defaultValue": "Standard_A2",
            "allowedValues": [
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D12_v2",
                "Standard_A2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14"
            ],
            "metadata": {
                "description": "Size of the zookeeper vm's"
            }
        },
        "postgresVMSize": {
            "type": "string",
            "defaultValue": "Standard_A2",
            "allowedValues": [
                "Standard_D2_v2",
                "Standard_D3_v2",
                "Standard_D4_v2",
                "Standard_D12_v2",
                "Standard_A2",
                "Standard_A3",
                "Standard_A4",
                "Standard_A5",
                "Standard_A6",
                "Standard_A7",
                "Standard_DS2",
                "Standard_DS3",
                "Standard_DS4",
                "Standard_DS12",
                "Standard_DS13",
                "Standard_DS14"
            ],
            "metadata": {
                "description": "Size of the postgres vm's"
            }
        },
        "postgresDataSize": {
            "defaultValue": 256,
            "type": "Int",
            "metadata": {
                "description": "Size of the postgres data ssd in GB."
            }
        },
        "instanceCount": {
            "defaultValue": 2,
            "minValue": 2,
            "maxValue": 5,
            "type": "Int",
            "metadata": {
                "description": "Number of postgreSQL servers in the cluster."
            }
        },
        "adminUsername": {
            "type": "String",
            "defaultValue": "sshuser"
        },
        "adminPassword": {
            "type": "SecureString"
        }
    },
    "variables": {
        "storageAccountSuffix": "[concat('vmds', parameters('clusterName'))]",
        "storageAccountPrefix": [
            "a",
            "g",
            "m",
            "s",
            "y"
        ],
        "nestedTemplates": "[concat(parameters('_artifactsLocation'), '/nestedtemplates/')]",
        "storageAccountType": "Standard_LRS",
        "lbName": "postgresLoadBalancer",
        "vnetFile": {
            "yes": "network-resources.json",
            "no": "empty-resources.json"
        },
        "lbFile": {
            "external": "external-lb.json",
            "internal": "internal-lb.json"
        },
        "lbId": "[resourceId('Microsoft.Network/loadBalancers/', variables('lbName'))]",
        "vnetId": "[resourceId(parameters('vnetGroup'), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]",
        "zookeeperInstanceCount": 3,
        "postgresInstanceCount": "[parameters('instanceCount')]",
        "osType": {
            "publisher": "Canonical",
            "offer": "UbuntuServer",
            "sku": "16.04.0-LTS",
            "version": "latest"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deployments",
            "name": "vnet",
            "apiVersion": "2015-01-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('nestedTemplates'), variables('vnetFile')[parameters('newVnet')])]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "vnetName": {
                        "value": "[parameters('vnetName')]"
                    },
                    "zookeeperNetName": {
                        "value": "[parameters('zookeeperNetName')]"
                    },
                    "postgresNetName": {
                        "value": "[parameters('postgresNetName')]"
                    }
                }
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[concat(variables('storageAccountPrefix')[copyIndex()], variables('storageAccountSuffix'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "storageLoop",
                "count": "[length(variables('storageAccountPrefix'))]"
            },
            "properties": {
                "accountType": "[variables('storageAccountType')]"
            }
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[concat(variables('storageAccountPrefix')[copyIndex()], 'd', variables('storageAccountSuffix'))]",
            "apiVersion": "2015-06-15",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "storageDataLoop",
                "count": "[length(variables('storageAccountPrefix'))]"
            },
            "properties": {
                "accountType": "Premium_LRS"
            }
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "postgresAvailabilitySet",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {}
        },
        {
            "type": "Microsoft.Compute/availabilitySets",
            "name": "zookeeperAvailabilitySet",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "properties": {}
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat('zookeeper', copyIndex(), '-nic')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "zookeeperNicLoop",
                "count": "[variables('zookeeperInstanceCount')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "zookeeperIp",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[concat('172.16.100.', copyIndex(10))]",
                            "subnet": {
                                "id": "[concat(variables('vnetId'), '/subnets/', parameters('zookeeperNetName'))]"
                            }
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet')]",
                "[resourceId('Microsoft.Resources/deployments', 'lb-temp')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat('zookeeper', copyIndex())]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "zookeeperVmLoop",
                "count": "[variables('zookeeperInstanceCount')]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'zookeeperAvailabilitySet')]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('zookeeperVMSize')]"
                },
                "osProfile": {
                    "computerName": "[concat('zookeeper', copyIndex())]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "16.04.0-LTS",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefix')[copyIndex()], variables('storageAccountSuffix')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, 'vhds/', 'zookeeperosdisk', copyIndex(), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    }
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('zookeeper', copyIndex(), '-nic'))]"
                        }
                    ]
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefix')[copyIndex()], variables('storageAccountSuffix'))]",
                "[concat('Microsoft.Network/networkInterfaces/', 'zookeeper', copyIndex(), '-nic')]",
                "[resourceId('Microsoft.Resources/deployments', 'vnet')]",
                "[concat('Microsoft.Compute/availabilitySets/', 'zookeeperAvailabilitySet')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat('zookeeper', copyIndex(), '/zookeeperExtension')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "zookeeperExtLoop",
                "count": "[variables('zookeeperInstanceCount')]"
            },
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.2",
                "settings": {
                    "fileUris": [
                        "[concat(parameters('_artifactsLocation'), '/zookeeper_startup.sh')]"
                    ],
                    "commandToExecute": "[concat('sh zookeeper_startup.sh ', copyIndex(), ' ', variables('zookeeperInstanceCount'))]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', 'zookeeper', copyIndex())]"
            ]
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "name": "[concat('postgres', copyIndex(), '-nic')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "postgresNicLoop",
                "count": "[variables('postgresInstanceCount')]"
            },
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "postgresIp",
                        "properties": {
                            "privateIPAllocationMethod": "Static",
                            "privateIPAddress": "[concat('172.16.101.', copyIndex(10))]",
                            "subnet": {
                                "id": "[concat(variables('vnetId'), '/subnets/', parameters('postgresNetName'))]"
                            },
                            "loadBalancerBackendAddressPools": [
                                {
                                    "id": "[concat(variables('lbId'), '/backendAddressPools/loadBalancerBackEnd')]"
                                }
                            ],
                            "loadBalancerInboundNatRules": [
                                {
                                    "id": "[concat(variables('lbId'), '/inboundNatRules/postgresSsh', copyIndex())]"
                                }
                            ]
                        }
                    }
                ]
            },
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet')]",
                "[resourceId('Microsoft.Resources/deployments', 'lb-temp')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "name": "[concat('postgres', copyIndex())]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "postgresVmLoop",
                "count": "[variables('postgresInstanceCount')]"
            },
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', 'postgresAvailabilitySet')]"
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('postgresVMSize')]"
                },
                "osProfile": {
                    "computerName": "[concat('postgres', copyIndex())]",
                    "adminUsername": "[parameters('adminUserName')]",
                    "adminPassword": "[parameters('adminPassword')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "Canonical",
                        "offer": "UbuntuServer",
                        "sku": "16.04.0-LTS",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "osdisk",
                        "vhd": {
                            "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefix')[copyIndex()], 'd', variables('storageAccountSuffix')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, 'vhds/', 'postgresosdisk', copyIndex(), '.vhd')]"
                        },
                        "caching": "ReadWrite",
                        "createOption": "FromImage"
                    },
                    "dataDisks": [
                        {
                            "name": "data0",
                            "diskSizeGB": "[parameters('postgresDataSize')]",
                            "lun": 0,
                            "vhd": {
                                "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefix')[copyIndex()], 'd', variables('storageAccountSuffix')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, 'vhds/', 'data0', copyIndex(), '.vhd')]"
                            },
                            "createOption": "Empty"
                        }
                    ]
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat('postgres', copyIndex(), '-nic'))]"
                        }
                    ]
                }
            },
            "dependsOn": [
                "storageLoop",
                "storageDataLoop",
                "zookeeperVmLoop",
                "zookeeperExtLoop",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefix')[copyIndex()], variables('storageAccountSuffix'))]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefix')[copyIndex()], 'd', variables('storageAccountSuffix'))]",
                "[concat('Microsoft.Network/networkInterfaces/', 'postgres', copyIndex(), '-nic')]",
                "[concat('Microsoft.Compute/availabilitySets/', 'postgresAvailabilitySet')]"
            ]
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat('postgres', copyIndex(), '/postgresExtension')]",
            "apiVersion": "2015-05-01-preview",
            "location": "[resourceGroup().location]",
            "copy": {
                "name": "postgresExtLoop",
                "count": "[variables('postgresInstanceCount')]"
            },
            "properties": {
                "publisher": "Microsoft.OSTCExtensions",
                "type": "CustomScriptForLinux",
                "typeHandlerVersion": "1.2",
                "settings": {
                    "fileUris": [
                        "[concat(parameters('_artifactsLocation'), '/autopart.sh')]",
                        "[concat(parameters('_artifactsLocation'), '/postgres_startup.sh')]"
                    ],
                    "commandToExecute": "[concat('sh postgres_startup.sh ', parameters('clusterName'), ' ', variables('zookeeperInstanceCount'), ' ', variables('postgresInstanceCount'), ' ', copyIndex(), ' ', parameters('adminUsername'), ' \"', parameters('adminPassword'), '\" ')]"
                }
            },
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', 'postgres', copyIndex())]"
            ]
        },
        {
            "type": "Microsoft.Resources/deployments",
            "name": "lb-temp",
            "apiVersion": "2015-01-01",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[concat(variables('nestedTemplates'), variables('lbFile')[parameters('lbType')])]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "clusterName": {
                        "value": "[parameters('clusterName')]"
                    },
                    "lbName": {
                        "value": "[variables('lbName')]"
                    },
                    "lbId": {
                        "value": "[variables('lbId')]"
                    },
                    "vnetId": {
                        "value": "[variables('vnetId')]"
                    },
                    "postgresNetName": {
                        "value": "[parameters('postgresNetName')]"
                    }
                }
            },
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'vnet')]"
            ]
        }
    ],
    "outputs": {
        "fqdn": {
            "type": "String",
            "value": "172.16.101.4"
        },
        "port": {
            "type": "Int",
            "value": 5432
        },
        "postgresUser": {
            "type": "String",
            "value": "admin"
        },
        "postgresUserPassword": {
            "type": "SecureString",
            "value": "[parameters('adminPassword')]"
        }
    }
}
